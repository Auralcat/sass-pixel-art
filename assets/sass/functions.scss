/* Declare the pixelize function here. */
@function pixelize($matrix, $size, $color: hotpink) {
    $l: length($matrix);
    $shadows: '';
    $i: $l;                     /* Length of matrix line */

    /* Color translation table */
    $pixel-color-map: (
        'r': #f00,
        'w': #fff,
        'k': #000,              /* k for key, from CMYK */
        'o': transparent,
        'x': hotpink
    );

    /* Go through all the rows in the list */
    @for $i from 1 through $l {
        $row: nth($matrix, $i); /* Single row */

        @for $j from 1 through $l {
            $item: nth($row, $j);

            /* Translate codes from matrix */
            @if map-has-key($pixel-color-map, $item) {
                /* Is there a better way of joining strings with SassScript? */
                $shadows: $shadows + unquote(($j * $size) + ' ' + ($i * $size) + ' ' + map-get($pixel-color-map, $item)) + ', ';
            } @else {
                /* Safeguard */
                @warn 'There is no color specified in "$pixel-color-map" for "#{$item}"';
            }
        }
    }
    /* Return entire shadow list */
    @return unquote(str-slice($shadows, 1, str-length($shadows) - 2));
}

@mixin style-item($matrix, $size) {
    position: relative;
    width: ($size * length(nth($matrix, 1)));
    height: ($size * length($matrix));

    &:after {
        content: '';
        position: absolute;
        top: $size * (-1);
        left: $size * (-1);
        width: $size;
        height: $size;
        box-shadow: pixelize($matrix, $size);
    }
}
